tables:
  - name: Messages
    type: source
    update-mode: append
    schema:
      - name: messageId
        type: LONG
      - name: accountId
        type: LONG
      - name: roomId
        type: LONG
      - name: content
        type: VARCHAR
      - name: sequenceNo
        type: LONG
      - name: createdAt
        type: LONG
    connector:
      property-version: 1
      type: kafka
      version: universal
      topic: Messages
      startup-mode: earliest-offset
      properties:
        - key: zookeeper.connect
          value: zookeeper:2181
        - key: bootstrap.servers
          value: kafka:9092
        - key: group.id
          value: testGroup
    format:
      property-version: 1
      type: json
      schema: "ROW(messageId LONG, accountId LONG, roomId LONG, content VARCHAR, sequenceNo LONG, createdAt LONG)"

  - name: Accounts
    type: source
    update-mode: append
    schema:
      - name: accountId
        type: LONG
      - name: accountName
        type: VARCHAR
      - name: sequenceNo
        type: LONG
    connector:
      property-version: 1
      type: kafka
      version: universal
      topic: Accounts
      startup-mode: earliest-offset
      properties:
        - key: zookeeper.connect
          value: zookeeper:2181
        - key: bootstrap.servers
          value: kafka:9092
        - key: group.id
          value: testGroup
    format:
      property-version: 1
      type: json
      schema: "ROW(accountId LONG, accountName VARCHAR, sequenceNo LONG)"

  - name: MessagesView
    #https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/sqlClient.html#sql-views
    type: view
    query: >
      select m.roomId, last_value(a.accountName) as accountName, m.messageId, last_value(m.content) as content, max(m.sequenceNo) as sequenceNo
      from Messages as m inner join Accounts as a
      on m.accountId = a.accountId
      group by m.roomId, m.messageId

  - name: Rides
    type: source
    update-mode: append
    schema:
      - name: rideId
        type: LONG
      - name: taxiId
        type: LONG
      - name: isStart
        type: BOOLEAN
      - name: lon
        type: FLOAT
      - name: lat
        type: FLOAT
      - name: rideTime
        type: TIMESTAMP
        rowtime:
          timestamps:
            type: "from-field"
            from: "eventTime"
          watermarks:
            type: "periodic-bounded"
            delay: "60000"
      - name: psgCnt
        type: INT
    connector:
      property-version: 1
      type: kafka
      version: universal
      topic: Rides
      startup-mode: earliest-offset
      properties:
        - key: zookeeper.connect
          value: zookeeper:2181
        - key: bootstrap.servers
          value: kafka:9092
        - key: group.id
          value: testGroup
    format:
      property-version: 1
      type: json
      schema: "ROW(rideId LONG, isStart BOOLEAN, eventTime TIMESTAMP, lon FLOAT, lat FLOAT, psgCnt INT, taxiId LONG)"

#==============================================================================
# Execution properties
#==============================================================================

# Execution properties allow for changing the behavior of a table program.

execution:
  planner: blink               # using the Blink planner
  type: streaming              # 'batch' or 'streaming' execution
  result-mode: table           # 'changelog' or 'table' presentation of results
  parallelism: 1               # parallelism of the program
  max-parallelism: 128         # maximum parallelism
  min-idle-state-retention: 0  # minimum idle state retention in ms
  max-idle-state-retention: 0  # maximum idle state retention in ms

#==============================================================================
# Execution properties
#==============================================================================

# Flink configuration parameters

configuration:
  execution.checkpointing.interval: 1s

#==============================================================================
# Deployment properties
#==============================================================================

# Deployment properties allow for describing the cluster to which table
# programs are submitted to.

deployment:
  type: standalone             # only the 'standalone' deployment is supported
  response-timeout: 5000       # general cluster communication timeout in ms
  gateway-address: ""          # (optional) address from cluster to gateway
  gateway-port: 0              # (optional) port from cluster to gateway


